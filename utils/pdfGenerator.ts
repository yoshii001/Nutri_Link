import { Report } from '@/types';
import { Platform } from 'react-native';
import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';
import * as FileSystem from 'expo-file-system';

export function generateReportHTML(
  reportId: string,
  report: Report,
  aiInsights?: string
): string {
  const cleanSummary = cleanAIResponse(report.feedbackSummary);
  const cleanInsights = aiInsights ? cleanAIResponse(aiInsights) : '';

  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Inter', 'Segoe UI', sans-serif;
      padding: 40px;
      color: #333;
      line-height: 1.6;
      background: #ffffff;
    }

    .header {
      text-align: center;
      margin-bottom: 40px;
      padding-bottom: 30px;
      border-bottom: 3px solid #007AFF;
    }

    .logo-section {
      margin-bottom: 20px;
    }

    .report-title {
      font-size: 32px;
      font-weight: 700;
      color: #007AFF;
      margin-bottom: 10px;
    }

    .report-subtitle {
      font-size: 18px;
      color: #666;
      margin-bottom: 5px;
    }

    .report-id {
      font-size: 14px;
      color: #999;
      font-family: monospace;
    }

    .metadata {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 30px;
    }

    .metadata-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
      padding: 8px 0;
      border-bottom: 1px solid #e9ecef;
    }

    .metadata-row:last-child {
      border-bottom: none;
      margin-bottom: 0;
    }

    .metadata-label {
      font-weight: 600;
      color: #495057;
    }

    .metadata-value {
      color: #212529;
      font-weight: 500;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
      margin-bottom: 40px;
    }

    .stat-card {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      padding: 25px;
      border-radius: 12px;
      text-align: center;
      color: white;
    }

    .stat-card:nth-child(2) {
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }

    .stat-card:nth-child(3) {
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    }

    .stat-label {
      font-size: 14px;
      opacity: 0.9;
      margin-bottom: 8px;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .stat-value {
      font-size: 36px;
      font-weight: 700;
      margin-bottom: 5px;
    }

    .section {
      margin-bottom: 35px;
      page-break-inside: avoid;
    }

    .section-title {
      font-size: 22px;
      font-weight: 700;
      color: #007AFF;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 2px solid #007AFF;
    }

    .content-box {
      background: #f8f9fa;
      padding: 25px;
      border-radius: 8px;
      border-left: 4px solid #007AFF;
    }

    .content-text {
      font-size: 15px;
      line-height: 1.8;
      color: #495057;
      white-space: pre-wrap;
    }

    .footer {
      margin-top: 50px;
      padding-top: 20px;
      border-top: 2px solid #e9ecef;
      text-align: center;
      color: #6c757d;
      font-size: 12px;
    }

    .footer-logo {
      font-size: 18px;
      font-weight: 700;
      color: #007AFF;
      margin-bottom: 10px;
    }

    .ai-badge {
      display: inline-block;
      background: #e3f2fd;
      color: #007AFF;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
      margin-top: 10px;
    }

    @media print {
      body {
        padding: 20px;
      }

      .stats-grid {
        page-break-inside: avoid;
      }

      .section {
        page-break-inside: avoid;
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="logo-section">
      <div class="report-title">KidsFeed System Report</div>
      <div class="report-subtitle">AI-Powered Meal Program Analysis</div>
    </div>
    <div class="report-id">Report ID: ${reportId}</div>
    <div class="ai-badge">âœ¨ Generated with AI</div>
  </div>

  <div class="metadata">
    <div class="metadata-row">
      <span class="metadata-label">Generated Date:</span>
      <span class="metadata-value">${new Date(report.dateGenerated).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}</span>
    </div>
    <div class="metadata-row">
      <span class="metadata-label">Generated By:</span>
      <span class="metadata-value">${report.generatedBy}</span>
    </div>
  </div>

  <div class="stats-grid">
    <div class="stat-card">
      <div class="stat-label">Meals Served</div>
      <div class="stat-value">${report.mealsServed}</div>
    </div>
    <div class="stat-card">
      <div class="stat-label">Donations Received</div>
      <div class="stat-value">Rs.${report.donationsReceived.toLocaleString()}</div>
    </div>
    <div class="stat-card">
      <div class="stat-label">Shortages</div>
      <div class="stat-value">${report.shortages}</div>
    </div>
  </div>

  <div class="section">
    <h2 class="section-title">Feedback Summary</h2>
    <div class="content-box">
      <div class="content-text">${cleanSummary}</div>
    </div>
  </div>

  ${cleanInsights ? `
  <div class="section">
    <h2 class="section-title">Detailed Insights</h2>
    <div class="content-box">
      <div class="content-text">${cleanInsights}</div>
    </div>
  </div>
  ` : ''}

  <div class="footer">
    <div class="footer-logo">KidsFeed</div>
    <div>School Meal Management System</div>
    <div>Empowering nutrition for every child</div>
  </div>
</body>
</html>
`;
}

function cleanAIResponse(text: string): string {
  let cleaned = text;

  // Remove common AI response prefixes
  const prefixes = [
    /^Okay,?\s+here\s+is\s+.*?:\s*/i,
    /^Here\s+is\s+.*?:\s*/i,
    /^Sure,?\s+here\s+is\s+.*?:\s*/i,
    /^Based\s+on\s+.*?,\s+here\s+is\s+.*?:\s*/i,
  ];

  prefixes.forEach(prefix => {
    cleaned = cleaned.replace(prefix, '');
  });

  // Remove numbered list formatting artifacts for cleaner display
  cleaned = cleaned.replace(/^\*\*(\d+\.)\s+/gm, '$1 ');
  cleaned = cleaned.replace(/^\*\*/gm, '');
  cleaned = cleaned.replace(/\*\*$/gm, '');

  // Clean up excessive line breaks
  cleaned = cleaned.replace(/\n{3,}/g, '\n\n');

  return cleaned.trim();
}

export async function generateAndDownloadPDF(
  html: string,
  filename: string
): Promise<void> {
  if (Platform.OS === 'web') {
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      alert('Please allow popups to download the PDF');
      return;
    }

    printWindow.document.write(html);
    printWindow.document.close();

    printWindow.onload = () => {
      setTimeout(() => {
        printWindow.print();
      }, 250);
    };
  } else {
    try {
      const { uri } = await Print.printToFileAsync({ html });
      await Sharing.shareAsync(uri, {
        UTI: '.pdf',
        mimeType: 'application/pdf',
      });
    } catch (error) {
      console.error('Error generating PDF:', error);
      throw error;
    }
  }
}

export async function generateAndSharePDF(
  html: string,
  filename: string
): Promise<void> {
  if (Platform.OS === 'web') {
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      alert('Please allow popups to share the PDF');
      return;
    }

    printWindow.document.write(html);
    printWindow.document.close();

    printWindow.onload = () => {
      setTimeout(() => {
        printWindow.print();
      }, 250);
    };
  } else {
    try {
      const { uri } = await Print.printToFileAsync({ html });
      const isAvailable = await Sharing.isAvailableAsync();

      if (isAvailable) {
        await Sharing.shareAsync(uri, {
          UTI: '.pdf',
          mimeType: 'application/pdf',
          dialogTitle: 'Share Report PDF',
        });
      } else {
        throw new Error('Sharing is not available on this device');
      }
    } catch (error) {
      console.error('Error sharing PDF:', error);
      throw error;
    }
  }
}

export function downloadPDF(html: string, filename: string): void {
  if (typeof window === 'undefined') return;

  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    alert('Please allow popups to download the PDF');
    return;
  }

  printWindow.document.write(html);
  printWindow.document.close();

  printWindow.onload = () => {
    setTimeout(() => {
      printWindow.print();
    }, 250);
  };
}
